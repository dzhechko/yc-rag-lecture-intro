// –ì–ª–∞–≤–Ω—ã–π JavaScript —Ñ–∞–π–ª –¥–ª—è RAG —Å–µ–º–∏–Ω–∞—Ä–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let pyodide = null;
let currentProgress = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ–º–∏–Ω–∞—Ä–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initNavigation();
    initProgressTracking();
    initPyodide();
    initNotifications();
    initScrollEffects();
    
    console.log('‚úÖ RAG —Å–µ–º–∏–Ω–∞—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –ò–ù–¢–ï–†–§–ï–ô–° ===

function initNavigation() {
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                updateProgress(Math.min(currentProgress + 10, 100));
            }
        });
    });

    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ)
    const mobileMenuButton = document.querySelector('.md\\:hidden button');
    if (mobileMenuButton) {
        mobileMenuButton.addEventListener('click', toggleMobileMenu);
    }
}

function toggleMobileMenu() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    console.log('–ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ');
}

// === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê ===

function initProgressTracking() {
    // Intersection Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const sections = document.querySelectorAll('section[id]');
    const progressObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const sectionId = entry.target.id;
                updateProgressBasedOnSection(sectionId);
            }
        });
    }, {
        threshold: 0.3
    });

    sections.forEach(section => {
        progressObserver.observe(section);
    });

    // –ö–Ω–æ–ø–∫–∞ "–Ω–∞–≤–µ—Ä—Ö"
    createBackToTopButton();
}

function updateProgress(percent) {
    currentProgress = Math.max(currentProgress, percent);
    document.getElementById('progress-fill').style.width = currentProgress + '%';
    document.getElementById('progress-text').textContent = currentProgress + '%';
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
    localStorage.setItem('rag_seminar_progress', currentProgress);
}

function updateProgressBasedOnSection(sectionId) {
    const progressMap = {
        'overview': 20,
        'theory': 40,
        'practice': 60,
        'quiz': 80,
        'yandex': 90
    };
    
    if (progressMap[sectionId]) {
        updateProgress(progressMap[sectionId]);
    }
}

function createBackToTopButton() {
    const backToTopButton = document.createElement('button');
    backToTopButton.className = 'nav-arrow';
    backToTopButton.innerHTML = '<i class="fas fa-arrow-up"></i>';
    backToTopButton.setAttribute('aria-label', '–ù–∞–≤–µ—Ä—Ö');
    
    document.body.appendChild(backToTopButton);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
            backToTopButton.classList.add('show');
        } else {
            backToTopButton.classList.remove('show');
        }
    });
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –∫–ª–∏–∫–µ
    backToTopButton.addEventListener('click', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// === PYODIDE –ò –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–î–ê ===

async function initPyodide() {
    try {
        console.log('üêç –ó–∞–≥—Ä—É–∑–∫–∞ Pyodide...');
        updateSandboxStatus('loading');
        
        pyodide = await loadPyodide({
            indexURL: "https://cdn.jsdelivr.net/pyodide/v0.28.2/full/"
        });
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...');
        await pyodide.loadPackage(['numpy']);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ scikit-learn –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π, –¥–µ–ª–∞–µ–º —ç—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        try {
            await pyodide.loadPackage(['scikit-learn']);
            console.log('‚úÖ scikit-learn –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (e) {
            console.warn('‚ö†Ô∏è scikit-learn –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
        }
        
        console.log('‚úÖ Pyodide –≥–æ—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞');
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Å–æ—á–Ω–∏—Ü
        updateSandboxStatus('ready');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pyodide:', error);
        updateSandboxStatus('error');
    }
}

async function runPythonCode(code, outputElementId) {
    const outputElement = document.getElementById(outputElementId);
    
    if (!outputElement) {
        console.error(`–≠–ª–µ–º–µ–Ω—Ç –≤—ã–≤–æ–¥–∞ ${outputElementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    if (!pyodide) {
        outputElement.innerHTML = '<div class="text-yellow-600">‚ö†Ô∏è Pyodide –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>';
        await initPyodide();
        if (!pyodide) {
            outputElement.innerHTML = '<div class="text-red-600">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Pyodide</div>';
            return;
        }
    }
    
    outputElement.innerHTML = '<div class="text-blue-600">üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞...</div>';
    
    try {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∫–æ–¥–µ
        const cleanCode = code.replace(/^\t/gm, '    ');
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç print –¥–ª—è –≤—ã–≤–æ–¥–∞
        await pyodide.runPythonAsync(`
import sys
from io import StringIO
old_stdout = sys.stdout
sys.stdout = buffer = StringIO()
        `);
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–∞
        const startTime = performance.now();
        await pyodide.runPythonAsync(cleanCode);
        const executionTime = performance.now() - startTime;
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const output = await pyodide.runPythonAsync(`
sys.stdout = old_stdout
buffer.getvalue()
        `);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        outputElement.innerHTML = `
            <div class="text-green-600 text-xs mb-2">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${executionTime.toFixed(1)}–º—Å</div>
            <pre class="text-gray-100 whitespace-pre-wrap">${output || '–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤—ã–≤–æ–¥–∞)'}</pre>
        `;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞:', error);
        outputElement.innerHTML = `
            <div class="text-red-500">
                <strong>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong><br>
                <pre class="text-red-400 mt-2">${error.message}</pre>
            </div>
        `;
    }
}

function updateSandboxStatus(status) {
    const statusElements = document.querySelectorAll('.sandbox-status');
    statusElements.forEach(element => {
        switch(status) {
            case 'ready':
                element.innerHTML = '<i class="fas fa-check-circle text-green-500"></i> Python –≥–æ—Ç–æ–≤';
                element.className = 'sandbox-status text-green-600';
                break;
            case 'loading':
                element.innerHTML = '<i class="fas fa-spinner fa-spin text-blue-500"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
                element.className = 'sandbox-status text-blue-600';
                break;
            case 'error':
                element.innerHTML = '<i class="fas fa-exclamation-triangle text-red-500"></i> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
                element.className = 'sandbox-status text-red-600';
                break;
        }
    });
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===

function initNotifications() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationContainer = document.createElement('div');
    notificationContainer.id = 'notification-container';
    notificationContainer.className = 'fixed top-4 right-4 z-50 space-y-2';
    document.body.appendChild(notificationContainer);
}

function showNotification(message, type = 'success', duration = 3000) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icon = {
        'success': 'fas fa-check-circle',
        'error': 'fas fa-exclamation-triangle', 
        'warning': 'fas fa-exclamation-circle',
        'info': 'fas fa-info-circle'
    }[type];
    
    notification.innerHTML = `
        <div class="flex items-center">
            <i class="${icon} mr-2"></i>
            <span>${message}</span>
            <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    document.getElementById('notification-container').appendChild(notification);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, duration);
}

// === –≠–§–§–ï–ö–¢–´ –ü–†–û–ö–†–£–¢–ö–ò ===

function initScrollEffects() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const slideInObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-slide-in');
                slideInObserver.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∏ —Ä–∞–∑–¥–µ–ª–∞–º
    document.querySelectorAll('.card-shadow, .bg-white.rounded-xl').forEach(element => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(30px)';
        element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        slideInObserver.observe(element);
    });
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
const animationStyles = `
.animate-slide-in {
    opacity: 1 !important;
    transform: translateY(0) !important;
}
`;

const styleSheet = document.createElement('style');
styleSheet.textContent = animationStyles;
document.head.appendChild(styleSheet);

// === –¢–ê–ë–´ ===

function initTabs(tabsContainerId) {
    const tabsContainer = document.getElementById(tabsContainerId);
    if (!tabsContainer) {
        console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–æ–≤ ${tabsContainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    const tabs = tabsContainer.querySelectorAll('.tab');
    const parentSection = tabsContainer.closest('section');
    const tabContents = parentSection ? parentSection.querySelectorAll('.tab-content') : [];
    
    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${tabs.length} —Ç–∞–±–æ–≤ –∏ ${tabContents.length} –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤`);
    
    tabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
            e.preventDefault();
            const targetTab = this.getAttribute('data-tab');
            
            console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${targetTab}`);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            tabs.forEach(t => t.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.classList.add('active');
            const targetContent = document.getElementById(targetTab);
            if (targetContent) {
                targetContent.classList.add('active');
                console.log(`–¢–∞–± ${targetTab} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
            } else {
                console.error(`–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–∞–±–∞ ${targetTab} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
            trackTabSwitch(targetTab);
        });
    });
}

function trackTabSwitch(tabName) {
    console.log(`üìä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${tabName}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
}

// === –ö–í–ò–ó –§–£–ù–ö–¶–ò–û–ù–ê–õ ===

function initQuiz(quizContainerId) {
    const quizContainer = document.getElementById(quizContainerId);
    if (!quizContainer) return;
    
    const questions = [
        {
            id: 1,
            question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ RAG?",
            options: [
                "Retrieval-Augmented Generation",
                "Random Access Generator", 
                "Recursive Algorithm Graph",
                "Real-time AI Gateway"
            ],
            correct: 0,
            explanation: "RAG —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ Retrieval-Augmented Generation ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–∏—Å–∫–æ–º."
        },
        {
            id: 2,
            question: "–ö–∞–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?",
            options: [
                "Precision@k",
                "Recall@k",
                "F1-score", 
                "Accuracy"
            ],
            correct: 1,
            explanation: "Recall@k –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫—É—é –¥–æ–ª—é –≤—Å–µ—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ —Ç–æ–ø-k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        },
        {
            id: 3,
            question: "–ö–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ CPU?",
            options: [
                "FAISS",
                "Annoy",
                "HNSW",
                "Linear Search"
            ],
            correct: 2,
            explanation: "HNSW (Hierarchical Navigable Small World) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç state-of-the-art —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ CPU."
        },
        {
            id: 4,
            question: "–ß—Ç–æ —Ç–∞–∫–æ–µ 'chunk' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ RAG?",
            options: [
                "–¶–µ–ª—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                "–ù–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            ],
            correct: 1,
            explanation: "Chunk ‚Äî —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."
        },
        {
            id: 5,
            question: "–ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ö–æ–¥—è—Ç –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É RAG?",
            options: [
                "–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å",
                "Retriever + Generator",
                "–¢–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
                "–¢–æ–ª—å–∫–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏"
            ],
            correct: 1,
            explanation: "RAG —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: Retriever (–ø–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞) –∏ Generator (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å)."
        }
    ];
    
    renderQuiz(quizContainer, questions);
}

function renderQuiz(container, questions) {
    let currentAnswers = {};
    let quizCompleted = false;
    
    const quizHTML = `
        <div class="quiz-stats bg-gray-100 rounded-lg p-4 mb-6 text-center">
            <span class="text-gray-600">–ü—Ä–æ–≥—Ä–µ—Å—Å: <span id="quiz-progress">0/${questions.length}</span></span> | 
            <span class="text-gray-600">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <span id="quiz-score">0</span></span>
        </div>
        
        <div id="quiz-questions"></div>
        
        <button id="submit-quiz" class="w-full bg-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-purple-700 transition-colors mt-6" style="display: none;">
            –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        </button>
        
        <div id="final-results" class="bg-blue-50 rounded-lg p-6 mt-6 text-center" style="display: none;"></div>
    `;
    
    container.innerHTML = quizHTML;
    
    // –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionsContainer = container.querySelector('#quiz-questions');
    
    questions.forEach((q, index) => {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'bg-white rounded-lg p-6 mb-6 border border-gray-200';
        questionDiv.innerHTML = `
            <h4 class="text-lg font-semibold mb-4">–í–æ–ø—Ä–æ—Å ${index + 1}:</h4>
            <p class="mb-4"><strong>${q.question}</strong></p>
            <div class="space-y-3" data-question="${q.id}">
                ${q.options.map((option, optIndex) => `
                    <div class="quiz-option p-3 rounded-lg cursor-pointer" data-option="${optIndex}">
                        ${option}
                    </div>
                `).join('')}
            </div>
            <div class="quiz-result mt-4 p-4 rounded-lg" id="result-${q.id}" style="display: none;"></div>
        `;
        questionsContainer.appendChild(questionDiv);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    container.addEventListener('click', function(e) {
        if (e.target.classList.contains('quiz-option') && !quizCompleted) {
            handleQuizOptionClick(e, questions, currentAnswers);
        } else if (e.target.id === 'submit-quiz') {
            showQuizResults(container, questions, currentAnswers);
            quizCompleted = true;
        }
    });
    
    function handleQuizOptionClick(event, questions, answers) {
        const option = event.target;
        const questionContainer = option.closest('[data-question]');
        const questionId = parseInt(questionContainer.dataset.question);
        const selectedOption = parseInt(option.dataset.option);
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
        questionContainer.querySelectorAll('.quiz-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        
        // –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
        option.classList.add('selected');
        answers[questionId] = selectedOption;
        
        updateQuizProgress(container, Object.keys(answers).length, questions.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
        if (Object.keys(answers).length === questions.length) {
            container.querySelector('#submit-quiz').style.display = 'block';
        }
    }
}

function updateQuizProgress(container, answered, total) {
    container.querySelector('#quiz-progress').textContent = `${answered}/${total}`;
}

function showQuizResults(container, questions, answers) {
    let correctCount = 0;
    
    questions.forEach(q => {
        const userAnswer = answers[q.id];
        const isCorrect = userAnswer === q.correct;
        
        if (isCorrect) correctCount++;
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        const questionContainer = container.querySelector(`[data-question="${q.id}"]`);
        const options = questionContainer.querySelectorAll('.quiz-option');
        
        options.forEach((option, index) => {
            option.classList.remove('selected');
            if (index === q.correct) {
                option.classList.add('correct');
            } else if (index === userAnswer && !isCorrect) {
                option.classList.add('incorrect');
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        const resultDiv = container.querySelector(`#result-${q.id}`);
        resultDiv.style.display = 'block';
        resultDiv.className = `quiz-result mt-4 p-4 rounded-lg ${isCorrect ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`;
        resultDiv.innerHTML = `
            <div class="flex items-start">
                <i class="fas ${isCorrect ? 'fa-check-circle text-green-600' : 'fa-times-circle text-red-600'} mt-1 mr-3"></i>
                <div>
                    <strong>${isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}</strong><br>
                    <span class="text-sm">${q.explanation}</span>
                </div>
            </div>
        `;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    container.querySelector('#quiz-score').textContent = correctCount;
    
    const finalResults = container.querySelector('#final-results');
    const percentage = Math.round((correctCount / questions.length) * 100);
    let message = '';
    let emoji = '';
    
    if (percentage >= 80) {
        message = '–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ RAG!';
        emoji = 'üèÜ';
    } else if (percentage >= 60) {
        message = '–•–æ—Ä–æ—à–æ! –£ –≤–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è RAG.';
        emoji = 'üëç';
    } else {
        message = '–°—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑.';
        emoji = 'üìö';
    }
    
    finalResults.innerHTML = `
        <div class="text-6xl mb-4">${emoji}</div>
        <h3 class="text-2xl font-bold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞</h3>
        <div class="text-5xl font-bold text-purple-600 mb-4">${percentage}%</div>
        <p class="text-lg mb-4">${message}</p>
        <p class="text-gray-600">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctCount} –∏–∑ ${questions.length}</p>
    `;
    finalResults.style.display = 'block';
    
    container.querySelector('#submit-quiz').style.display = 'none';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgress(85);
    showNotification(`–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}%`, 'success');
}

// === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ===

function createEmbeddingVisualization(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (2D –ø—Ä–æ–µ–∫—Ü–∏—è)
    const documents = [
        {id: "doc1", x: 100, y: 150, text: "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", type: "document"},
        {id: "doc2", x: 120, y: 170, text: "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", type: "document"},
        {id: "doc3", x: 300, y: 100, text: "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã", type: "document"},
        {id: "doc4", x: 320, y: 120, text: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è", type: "document"},
        {id: "doc5", x: 200, y: 300, text: "–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á", type: "document"},
        {id: "doc6", x: 180, y: 280, text: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", type: "document"}
    ];
    
    const width = 600, height = 400;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ SVG
    const svg = d3.select(container)
        .append('svg')
        .attr('width', '100%')
        .attr('height', height)
        .attr('viewBox', `0 0 ${width} ${height}`)
        .style('border', '2px solid #e2e8f0')
        .style('border-radius', '8px')
        .style('background', 'white');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const dots = svg.selectAll('.document')
        .data(documents)
        .enter()
        .append('circle')
        .attr('class', 'document')
        .attr('cx', d => d.x)
        .attr('cy', d => d.y)
        .attr('r', 8)
        .attr('fill', '#4285f4')
        .attr('stroke', '#fff')
        .attr('stroke-width', 2)
        .style('cursor', 'pointer');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
    svg.selectAll('.label')
        .data(documents)
        .enter()
        .append('text')
        .attr('class', 'label')
        .attr('x', d => d.x)
        .attr('y', d => d.y - 15)
        .attr('text-anchor', 'middle')
        .attr('font-size', '12px')
        .attr('fill', '#333')
        .text(d => d.text);
    
    // –¢—É–ª—Ç–∏–ø—ã
    const tooltip = d3.select('body').append('div')
        .attr('class', 'tooltip')
        .style('opacity', 0);
    
    dots.on('mouseover', function(event, d) {
            tooltip.transition()
                .duration(200)
                .style('opacity', .9);
            tooltip.html(`<strong>${d.text}</strong><br>ID: ${d.id}`)
                .style('left', (event.pageX + 10) + 'px')
                .style('top', (event.pageY - 28) + 'px');
        })
        .on('mouseout', function() {
            tooltip.transition()
                .duration(500)
                .style('opacity', 0);
        });
}

// === –£–¢–ò–õ–ò–¢–´ ===

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        showNotification('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(err => {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    });
}

function downloadCode(code, filename) {
    const blob = new Blob([code], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    
    showNotification(`–§–∞–π–ª ${filename} –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
}

// === –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô ===

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.RAGSeminar = {
    runPythonCode,
    initTabs,
    initQuiz,
    createEmbeddingVisualization,
    showNotification,
    copyToClipboard,
    downloadCode,
    updateProgress
};

// === YANDEX RAG –§–£–ù–ö–¶–ò–ò ===

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–¥
function injectCredentialsIntoCode() {
    console.log('üîë –§—É–Ω–∫—Ü–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–¥');
    
    const folderId = document.getElementById('sandbox-folder-id')?.value || '';
    const apiKey = document.getElementById('sandbox-api-key')?.value || '';
    
    if (!folderId || !apiKey) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ Folder ID –∏ API –∫–ª—é—á', 'error');
        return;
    }
    
    // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å —Å –∫–æ–¥–æ–º
    const activeCodeArea = document.querySelector('textarea[id*="code"]:not([style*="display: none"])') || 
                          document.querySelector('textarea.code-editor') ||
                          document.getElementById('yandex-rag-code');
    
    if (!activeCodeArea) {
        showNotification('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞', 'error');
        return;
    }
    
    let code = activeCodeArea.value;
    
    // –ó–∞–º–µ–Ω–∏—Ç—å placeholder'—ã –≤ –∫–æ–¥–µ
    code = code.replace(/your_folder_id_here|YOUR_FOLDER_ID/g, folderId);
    code = code.replace(/your_api_key_here|YOUR_API_KEY/g, apiKey);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    activeCodeArea.value = code;
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    const statusElement = document.getElementById('credentials-status');
    if (statusElement) {
        statusElement.innerHTML = '<i class="fas fa-check-circle mr-1 text-green-600"></i>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –∫–æ–¥';
        statusElement.className = 'text-sm text-green-600';
    }
    
    showNotification('‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –∫–æ–¥!', 'success');
    updateProgress(Math.min(currentProgress + 5, 100));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validateCredentials() {
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    const folderId = document.getElementById('sandbox-folder-id')?.value || '';
    const apiKey = document.getElementById('sandbox-api-key')?.value || '';
    const statusElement = document.getElementById('credentials-status');
    
    if (!folderId || !apiKey) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'error');
        if (statusElement) {
            statusElement.innerHTML = '<i class="fas fa-exclamation-circle mr-1 text-red-600"></i>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            statusElement.className = 'text-sm text-red-600';
        }
        return;
    }
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    const folderIdPattern = /^b1[a-zA-Z0-9]{17}$/;
    const apiKeyPattern = /^AQVN[a-zA-Z0-9_-]{40,}$/;
    
    let isValid = true;
    let errorMessage = '';
    
    if (!folderIdPattern.test(folderId)) {
        isValid = false;
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Folder ID (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "b1" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 19 —Å–∏–º–≤–æ–ª–æ–≤)';
    } else if (!apiKeyPattern.test(apiKey)) {
        isValid = false;
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "AQVN")';
    }
    
    if (statusElement) {
        if (isValid) {
            statusElement.innerHTML = '<i class="fas fa-check-circle mr-1 text-green-600"></i>–§–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω';
            statusElement.className = 'text-sm text-green-600';
            showNotification('‚úÖ –§–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!', 'success');
            updateProgress(Math.min(currentProgress + 5, 100));
        } else {
            statusElement.innerHTML = `<i class="fas fa-times-circle mr-1 text-red-600"></i>${errorMessage}`;
            statusElement.className = 'text-sm text-red-600';
            showNotification(errorMessage, 'error');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let notification = document.getElementById('notification-container');
    if (!notification) {
        notification = document.createElement('div');
        notification.id = 'notification-container';
        notification.className = 'fixed top-4 right-4 z-50';
        document.body.appendChild(notification);
    }
    
    // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationElement = document.createElement('div');
    const bgColor = {
        success: 'bg-green-500',
        error: 'bg-red-500', 
        warning: 'bg-yellow-500',
        info: 'bg-blue-500'
    }[type] || 'bg-gray-500';
    
    notificationElement.className = `${bgColor} text-white px-4 py-2 rounded-lg shadow-lg mb-2 transform transition-all duration-300 translate-x-full`;
    notificationElement.innerHTML = `
        <div class="flex items-center">
            <span class="mr-2">${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    notification.appendChild(notificationElement);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notificationElement.classList.remove('translate-x-full');
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notificationElement.parentNode) {
            notificationElement.classList.add('translate-x-full');
            setTimeout(() => {
                if (notificationElement.parentNode) {
                    notificationElement.remove();
                }
            }, 300);
        }
    }, 5000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.injectCredentialsIntoCode = injectCredentialsIntoCode;
window.validateCredentials = validateCredentials;
window.showNotification = showNotification;

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.pyodide = pyodide;

console.log('üìö RAG —Å–µ–º–∏–Ω–∞—Ä JS –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');